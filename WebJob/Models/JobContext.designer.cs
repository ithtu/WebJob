#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebJob.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WEBJOB")]
	public partial class JobContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaccount(account instance);
    partial void Updateaccount(account instance);
    partial void Deleteaccount(account instance);
    partial void Insertapply_job(apply_job instance);
    partial void Updateapply_job(apply_job instance);
    partial void Deleteapply_job(apply_job instance);
    partial void Insertcomment_employee(comment_employee instance);
    partial void Updatecomment_employee(comment_employee instance);
    partial void Deletecomment_employee(comment_employee instance);
    partial void Insertcomment_employer(comment_employer instance);
    partial void Updatecomment_employer(comment_employer instance);
    partial void Deletecomment_employer(comment_employer instance);
    partial void Insertcompany(company instance);
    partial void Updatecompany(company instance);
    partial void Deletecompany(company instance);
    partial void Insertcover_letter(cover_letter instance);
    partial void Updatecover_letter(cover_letter instance);
    partial void Deletecover_letter(cover_letter instance);
    partial void Insertemployee(employee instance);
    partial void Updateemployee(employee instance);
    partial void Deleteemployee(employee instance);
    partial void Insertemployer(employer instance);
    partial void Updateemployer(employer instance);
    partial void Deleteemployer(employer instance);
    partial void Insertfollowing_company(following_company instance);
    partial void Updatefollowing_company(following_company instance);
    partial void Deletefollowing_company(following_company instance);
    partial void Insertfollowing_job(following_job instance);
    partial void Updatefollowing_job(following_job instance);
    partial void Deletefollowing_job(following_job instance);
    partial void Insertjob(job instance);
    partial void Updatejob(job instance);
    partial void Deletejob(job instance);
    partial void Insertjob_detail(job_detail instance);
    partial void Updatejob_detail(job_detail instance);
    partial void Deletejob_detail(job_detail instance);
    partial void Insertjob_skill(job_skill instance);
    partial void Updatejob_skill(job_skill instance);
    partial void Deletejob_skill(job_skill instance);
    partial void Insertjob_title(job_title instance);
    partial void Updatejob_title(job_title instance);
    partial void Deletejob_title(job_title instance);
    partial void Insertprofile(profile instance);
    partial void Updateprofile(profile instance);
    partial void Deleteprofile(profile instance);
    partial void Insertrating(rating instance);
    partial void Updaterating(rating instance);
    partial void Deleterating(rating instance);
    partial void Insertreply_comment(reply_comment instance);
    partial void Updatereply_comment(reply_comment instance);
    partial void Deletereply_comment(reply_comment instance);
    partial void Insertrole(role instance);
    partial void Updaterole(role instance);
    partial void Deleterole(role instance);
    #endregion
		
		public JobContextDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WEBJOBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public JobContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JobContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JobContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JobContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<account> accounts
		{
			get
			{
				return this.GetTable<account>();
			}
		}
		
		public System.Data.Linq.Table<apply_job> apply_jobs
		{
			get
			{
				return this.GetTable<apply_job>();
			}
		}
		
		public System.Data.Linq.Table<comment_employee> comment_employees
		{
			get
			{
				return this.GetTable<comment_employee>();
			}
		}
		
		public System.Data.Linq.Table<comment_employer> comment_employers
		{
			get
			{
				return this.GetTable<comment_employer>();
			}
		}
		
		public System.Data.Linq.Table<company> companies
		{
			get
			{
				return this.GetTable<company>();
			}
		}
		
		public System.Data.Linq.Table<cover_letter> cover_letters
		{
			get
			{
				return this.GetTable<cover_letter>();
			}
		}
		
		public System.Data.Linq.Table<employee> employees
		{
			get
			{
				return this.GetTable<employee>();
			}
		}
		
		public System.Data.Linq.Table<employer> employers
		{
			get
			{
				return this.GetTable<employer>();
			}
		}
		
		public System.Data.Linq.Table<following_company> following_companies
		{
			get
			{
				return this.GetTable<following_company>();
			}
		}
		
		public System.Data.Linq.Table<following_job> following_jobs
		{
			get
			{
				return this.GetTable<following_job>();
			}
		}
		
		public System.Data.Linq.Table<job> jobs
		{
			get
			{
				return this.GetTable<job>();
			}
		}
		
		public System.Data.Linq.Table<job_detail> job_details
		{
			get
			{
				return this.GetTable<job_detail>();
			}
		}
		
		public System.Data.Linq.Table<job_skill> job_skills
		{
			get
			{
				return this.GetTable<job_skill>();
			}
		}
		
		public System.Data.Linq.Table<job_title> job_titles
		{
			get
			{
				return this.GetTable<job_title>();
			}
		}
		
		public System.Data.Linq.Table<profile> profiles
		{
			get
			{
				return this.GetTable<profile>();
			}
		}
		
		public System.Data.Linq.Table<rating> ratings
		{
			get
			{
				return this.GetTable<rating>();
			}
		}
		
		public System.Data.Linq.Table<reply_comment> reply_comments
		{
			get
			{
				return this.GetTable<reply_comment>();
			}
		}
		
		public System.Data.Linq.Table<role> roles
		{
			get
			{
				return this.GetTable<role>();
			}
		}
		
		public System.Data.Linq.Table<token> tokens
		{
			get
			{
				return this.GetTable<token>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.account")]
	public partial class account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_account;
		
		private string _password;
		
		private int _id_role;
		
		private string _confirm;
		
		private EntitySet<company> _companies;
		
		private EntitySet<employee> _employees;
		
		private EntitySet<employer> _employers;
		
		private EntityRef<role> _role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_accountChanging(string value);
    partial void Onid_accountChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onid_roleChanging(int value);
    partial void Onid_roleChanged();
    partial void OnconfirmChanging(string value);
    partial void OnconfirmChanged();
    #endregion
		
		public account()
		{
			this._companies = new EntitySet<company>(new Action<company>(this.attach_companies), new Action<company>(this.detach_companies));
			this._employees = new EntitySet<employee>(new Action<employee>(this.attach_employees), new Action<employee>(this.detach_employees));
			this._employers = new EntitySet<employer>(new Action<employer>(this.attach_employers), new Action<employer>(this.detach_employers));
			this._role = default(EntityRef<role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_account", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_account
		{
			get
			{
				return this._id_account;
			}
			set
			{
				if ((this._id_account != value))
				{
					this.Onid_accountChanging(value);
					this.SendPropertyChanging();
					this._id_account = value;
					this.SendPropertyChanged("id_account");
					this.Onid_accountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_role", DbType="Int NOT NULL")]
		public int id_role
		{
			get
			{
				return this._id_role;
			}
			set
			{
				if ((this._id_role != value))
				{
					if (this._role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_roleChanging(value);
					this.SendPropertyChanging();
					this._id_role = value;
					this.SendPropertyChanged("id_role");
					this.Onid_roleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[confirm]", Storage="_confirm", DbType="VarChar(5)")]
		public string confirm
		{
			get
			{
				return this._confirm;
			}
			set
			{
				if ((this._confirm != value))
				{
					this.OnconfirmChanging(value);
					this.SendPropertyChanging();
					this._confirm = value;
					this.SendPropertyChanged("confirm");
					this.OnconfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_company", Storage="_companies", ThisKey="id_account", OtherKey="id_account")]
		public EntitySet<company> companies
		{
			get
			{
				return this._companies;
			}
			set
			{
				this._companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_employee", Storage="_employees", ThisKey="id_account", OtherKey="id_account")]
		public EntitySet<employee> employees
		{
			get
			{
				return this._employees;
			}
			set
			{
				this._employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_employer", Storage="_employers", ThisKey="id_account", OtherKey="id_account")]
		public EntitySet<employer> employers
		{
			get
			{
				return this._employers;
			}
			set
			{
				this._employers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_account", Storage="_role", ThisKey="id_role", OtherKey="id_role", IsForeignKey=true)]
		public role role
		{
			get
			{
				return this._role.Entity;
			}
			set
			{
				role previousValue = this._role.Entity;
				if (((previousValue != value) 
							|| (this._role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._role.Entity = null;
						previousValue.accounts.Remove(this);
					}
					this._role.Entity = value;
					if ((value != null))
					{
						value.accounts.Add(this);
						this._id_role = value.id_role;
					}
					else
					{
						this._id_role = default(int);
					}
					this.SendPropertyChanged("role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_companies(company entity)
		{
			this.SendPropertyChanging();
			entity.account = this;
		}
		
		private void detach_companies(company entity)
		{
			this.SendPropertyChanging();
			entity.account = null;
		}
		
		private void attach_employees(employee entity)
		{
			this.SendPropertyChanging();
			entity.account = this;
		}
		
		private void detach_employees(employee entity)
		{
			this.SendPropertyChanging();
			entity.account = null;
		}
		
		private void attach_employers(employer entity)
		{
			this.SendPropertyChanging();
			entity.account = this;
		}
		
		private void detach_employers(employer entity)
		{
			this.SendPropertyChanging();
			entity.account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.apply_job")]
	public partial class apply_job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_employee;
		
		private string _id_job_detail;
		
		private string _name_apply;
		
		private string _note;
		
		private string _cv_apply;
		
		private EntityRef<employee> _employee;
		
		private EntityRef<job_detail> _job_detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_employeeChanging(string value);
    partial void Onid_employeeChanged();
    partial void Onid_job_detailChanging(string value);
    partial void Onid_job_detailChanged();
    partial void Onname_applyChanging(string value);
    partial void Onname_applyChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    partial void Oncv_applyChanging(string value);
    partial void Oncv_applyChanged();
    #endregion
		
		public apply_job()
		{
			this._employee = default(EntityRef<employee>);
			this._job_detail = default(EntityRef<job_detail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_employee", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_employee
		{
			get
			{
				return this._id_employee;
			}
			set
			{
				if ((this._id_employee != value))
				{
					if (this._employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_employeeChanging(value);
					this.SendPropertyChanging();
					this._id_employee = value;
					this.SendPropertyChanged("id_employee");
					this.Onid_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_job_detail", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_job_detail
		{
			get
			{
				return this._id_job_detail;
			}
			set
			{
				if ((this._id_job_detail != value))
				{
					if (this._job_detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_job_detailChanging(value);
					this.SendPropertyChanging();
					this._id_job_detail = value;
					this.SendPropertyChanged("id_job_detail");
					this.Onid_job_detailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_apply", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name_apply
		{
			get
			{
				return this._name_apply;
			}
			set
			{
				if ((this._name_apply != value))
				{
					this.Onname_applyChanging(value);
					this.SendPropertyChanging();
					this._name_apply = value;
					this.SendPropertyChanged("name_apply");
					this.Onname_applyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="NVarChar(500)")]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cv_apply", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string cv_apply
		{
			get
			{
				return this._cv_apply;
			}
			set
			{
				if ((this._cv_apply != value))
				{
					this.Oncv_applyChanging(value);
					this.SendPropertyChanging();
					this._cv_apply = value;
					this.SendPropertyChanged("cv_apply");
					this.Oncv_applyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_apply_job", Storage="_employee", ThisKey="id_employee", OtherKey="id_employee", IsForeignKey=true)]
		public employee employee
		{
			get
			{
				return this._employee.Entity;
			}
			set
			{
				employee previousValue = this._employee.Entity;
				if (((previousValue != value) 
							|| (this._employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee.Entity = null;
						previousValue.apply_jobs.Remove(this);
					}
					this._employee.Entity = value;
					if ((value != null))
					{
						value.apply_jobs.Add(this);
						this._id_employee = value.id_employee;
					}
					else
					{
						this._id_employee = default(string);
					}
					this.SendPropertyChanged("employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="job_detail_apply_job", Storage="_job_detail", ThisKey="id_job_detail", OtherKey="id_job_detail", IsForeignKey=true)]
		public job_detail job_detail
		{
			get
			{
				return this._job_detail.Entity;
			}
			set
			{
				job_detail previousValue = this._job_detail.Entity;
				if (((previousValue != value) 
							|| (this._job_detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._job_detail.Entity = null;
						previousValue.apply_jobs.Remove(this);
					}
					this._job_detail.Entity = value;
					if ((value != null))
					{
						value.apply_jobs.Add(this);
						this._id_job_detail = value.id_job_detail;
					}
					else
					{
						this._id_job_detail = default(string);
					}
					this.SendPropertyChanged("job_detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.comment_employee")]
	public partial class comment_employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_comments;
		
		private string _id_employee;
		
		private string _content;
		
		private string _id_job_detail;
		
		private System.Nullable<System.DateTime> _comment_date;
		
		private EntitySet<comment_employer> _comment_employers;
		
		private EntitySet<reply_comment> _reply_comments;
		
		private EntityRef<employee> _employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_commentsChanging(string value);
    partial void Onid_commentsChanged();
    partial void Onid_employeeChanging(string value);
    partial void Onid_employeeChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void Onid_job_detailChanging(string value);
    partial void Onid_job_detailChanged();
    partial void Oncomment_dateChanging(System.Nullable<System.DateTime> value);
    partial void Oncomment_dateChanged();
    #endregion
		
		public comment_employee()
		{
			this._comment_employers = new EntitySet<comment_employer>(new Action<comment_employer>(this.attach_comment_employers), new Action<comment_employer>(this.detach_comment_employers));
			this._reply_comments = new EntitySet<reply_comment>(new Action<reply_comment>(this.attach_reply_comments), new Action<reply_comment>(this.detach_reply_comments));
			this._employee = default(EntityRef<employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_comments", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_comments
		{
			get
			{
				return this._id_comments;
			}
			set
			{
				if ((this._id_comments != value))
				{
					this.Onid_commentsChanging(value);
					this.SendPropertyChanging();
					this._id_comments = value;
					this.SendPropertyChanged("id_comments");
					this.Onid_commentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_employee", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string id_employee
		{
			get
			{
				return this._id_employee;
			}
			set
			{
				if ((this._id_employee != value))
				{
					if (this._employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_employeeChanging(value);
					this.SendPropertyChanging();
					this._id_employee = value;
					this.SendPropertyChanged("id_employee");
					this.Onid_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="NVarChar(MAX)")]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_job_detail", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string id_job_detail
		{
			get
			{
				return this._id_job_detail;
			}
			set
			{
				if ((this._id_job_detail != value))
				{
					this.Onid_job_detailChanging(value);
					this.SendPropertyChanging();
					this._id_job_detail = value;
					this.SendPropertyChanged("id_job_detail");
					this.Onid_job_detailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> comment_date
		{
			get
			{
				return this._comment_date;
			}
			set
			{
				if ((this._comment_date != value))
				{
					this.Oncomment_dateChanging(value);
					this.SendPropertyChanging();
					this._comment_date = value;
					this.SendPropertyChanged("comment_date");
					this.Oncomment_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="comment_employee_comment_employer", Storage="_comment_employers", ThisKey="id_comments", OtherKey="Id_comment_employee")]
		public EntitySet<comment_employer> comment_employers
		{
			get
			{
				return this._comment_employers;
			}
			set
			{
				this._comment_employers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="comment_employee_reply_comment", Storage="_reply_comments", ThisKey="id_comments", OtherKey="id_comment")]
		public EntitySet<reply_comment> reply_comments
		{
			get
			{
				return this._reply_comments;
			}
			set
			{
				this._reply_comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_comment_employee", Storage="_employee", ThisKey="id_employee", OtherKey="id_employee", IsForeignKey=true)]
		public employee employee
		{
			get
			{
				return this._employee.Entity;
			}
			set
			{
				employee previousValue = this._employee.Entity;
				if (((previousValue != value) 
							|| (this._employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee.Entity = null;
						previousValue.comment_employees.Remove(this);
					}
					this._employee.Entity = value;
					if ((value != null))
					{
						value.comment_employees.Add(this);
						this._id_employee = value.id_employee;
					}
					else
					{
						this._id_employee = default(string);
					}
					this.SendPropertyChanged("employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_comment_employers(comment_employer entity)
		{
			this.SendPropertyChanging();
			entity.comment_employee = this;
		}
		
		private void detach_comment_employers(comment_employer entity)
		{
			this.SendPropertyChanging();
			entity.comment_employee = null;
		}
		
		private void attach_reply_comments(reply_comment entity)
		{
			this.SendPropertyChanging();
			entity.comment_employee = this;
		}
		
		private void detach_reply_comments(reply_comment entity)
		{
			this.SendPropertyChanging();
			entity.comment_employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.comment_employer")]
	public partial class comment_employer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_comment;
		
		private string _content;
		
		private System.Nullable<System.DateTime> _comment_date;
		
		private string _Id_comment_employee;
		
		private string _id_employer;
		
		private EntityRef<comment_employee> _comment_employee;
		
		private EntityRef<employer> _employer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_commentChanging(string value);
    partial void Onid_commentChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void Oncomment_dateChanging(System.Nullable<System.DateTime> value);
    partial void Oncomment_dateChanged();
    partial void OnId_comment_employeeChanging(string value);
    partial void OnId_comment_employeeChanged();
    partial void Onid_employerChanging(string value);
    partial void Onid_employerChanged();
    #endregion
		
		public comment_employer()
		{
			this._comment_employee = default(EntityRef<comment_employee>);
			this._employer = default(EntityRef<employer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_comment", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_comment
		{
			get
			{
				return this._id_comment;
			}
			set
			{
				if ((this._id_comment != value))
				{
					this.Onid_commentChanging(value);
					this.SendPropertyChanging();
					this._id_comment = value;
					this.SendPropertyChanged("id_comment");
					this.Onid_commentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="NVarChar(MAX)")]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> comment_date
		{
			get
			{
				return this._comment_date;
			}
			set
			{
				if ((this._comment_date != value))
				{
					this.Oncomment_dateChanging(value);
					this.SendPropertyChanging();
					this._comment_date = value;
					this.SendPropertyChanged("comment_date");
					this.Oncomment_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_comment_employee", DbType="VarChar(20)")]
		public string Id_comment_employee
		{
			get
			{
				return this._Id_comment_employee;
			}
			set
			{
				if ((this._Id_comment_employee != value))
				{
					if (this._comment_employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_comment_employeeChanging(value);
					this.SendPropertyChanging();
					this._Id_comment_employee = value;
					this.SendPropertyChanged("Id_comment_employee");
					this.OnId_comment_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_employer", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string id_employer
		{
			get
			{
				return this._id_employer;
			}
			set
			{
				if ((this._id_employer != value))
				{
					if (this._employer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_employerChanging(value);
					this.SendPropertyChanging();
					this._id_employer = value;
					this.SendPropertyChanged("id_employer");
					this.Onid_employerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="comment_employee_comment_employer", Storage="_comment_employee", ThisKey="Id_comment_employee", OtherKey="id_comments", IsForeignKey=true)]
		public comment_employee comment_employee
		{
			get
			{
				return this._comment_employee.Entity;
			}
			set
			{
				comment_employee previousValue = this._comment_employee.Entity;
				if (((previousValue != value) 
							|| (this._comment_employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._comment_employee.Entity = null;
						previousValue.comment_employers.Remove(this);
					}
					this._comment_employee.Entity = value;
					if ((value != null))
					{
						value.comment_employers.Add(this);
						this._Id_comment_employee = value.id_comments;
					}
					else
					{
						this._Id_comment_employee = default(string);
					}
					this.SendPropertyChanged("comment_employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employer_comment_employer", Storage="_employer", ThisKey="id_employer", OtherKey="id_employer", IsForeignKey=true)]
		public employer employer
		{
			get
			{
				return this._employer.Entity;
			}
			set
			{
				employer previousValue = this._employer.Entity;
				if (((previousValue != value) 
							|| (this._employer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employer.Entity = null;
						previousValue.comment_employers.Remove(this);
					}
					this._employer.Entity = value;
					if ((value != null))
					{
						value.comment_employers.Add(this);
						this._id_employer = value.id_employer;
					}
					else
					{
						this._id_employer = default(string);
					}
					this.SendPropertyChanged("employer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.company")]
	public partial class company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_company;
		
		private string _name_company;
		
		private string _address;
		
		private string _email;
		
		private string _phonenumber;
		
		private string _active_status;
		
		private string _id_account;
		
		private string _logo;
		
		private EntitySet<employer> _employers;
		
		private EntitySet<following_company> _following_companies;
		
		private EntitySet<job> _jobs;
		
		private EntitySet<reply_comment> _reply_comments;
		
		private EntityRef<account> _account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_companyChanging(string value);
    partial void Onid_companyChanged();
    partial void Onname_companyChanging(string value);
    partial void Onname_companyChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnphonenumberChanging(string value);
    partial void OnphonenumberChanged();
    partial void Onactive_statusChanging(string value);
    partial void Onactive_statusChanged();
    partial void Onid_accountChanging(string value);
    partial void Onid_accountChanged();
    partial void OnlogoChanging(string value);
    partial void OnlogoChanged();
    #endregion
		
		public company()
		{
			this._employers = new EntitySet<employer>(new Action<employer>(this.attach_employers), new Action<employer>(this.detach_employers));
			this._following_companies = new EntitySet<following_company>(new Action<following_company>(this.attach_following_companies), new Action<following_company>(this.detach_following_companies));
			this._jobs = new EntitySet<job>(new Action<job>(this.attach_jobs), new Action<job>(this.detach_jobs));
			this._reply_comments = new EntitySet<reply_comment>(new Action<reply_comment>(this.attach_reply_comments), new Action<reply_comment>(this.detach_reply_comments));
			this._account = default(EntityRef<account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_company", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_company
		{
			get
			{
				return this._id_company;
			}
			set
			{
				if ((this._id_company != value))
				{
					this.Onid_companyChanging(value);
					this.SendPropertyChanging();
					this._id_company = value;
					this.SendPropertyChanged("id_company");
					this.Onid_companyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_company", DbType="NVarChar(200)")]
		public string name_company
		{
			get
			{
				return this._name_company;
			}
			set
			{
				if ((this._name_company != value))
				{
					this.Onname_companyChanging(value);
					this.SendPropertyChanging();
					this._name_company = value;
					this.SendPropertyChanged("name_company");
					this.Onname_companyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(2000)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phonenumber", DbType="VarChar(12)")]
		public string phonenumber
		{
			get
			{
				return this._phonenumber;
			}
			set
			{
				if ((this._phonenumber != value))
				{
					this.OnphonenumberChanging(value);
					this.SendPropertyChanging();
					this._phonenumber = value;
					this.SendPropertyChanged("phonenumber");
					this.OnphonenumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active_status", DbType="NChar(10)")]
		public string active_status
		{
			get
			{
				return this._active_status;
			}
			set
			{
				if ((this._active_status != value))
				{
					this.Onactive_statusChanging(value);
					this.SendPropertyChanging();
					this._active_status = value;
					this.SendPropertyChanged("active_status");
					this.Onactive_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_account", DbType="VarChar(20)")]
		public string id_account
		{
			get
			{
				return this._id_account;
			}
			set
			{
				if ((this._id_account != value))
				{
					if (this._account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_accountChanging(value);
					this.SendPropertyChanging();
					this._id_account = value;
					this.SendPropertyChanged("id_account");
					this.Onid_accountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logo", DbType="NVarChar(MAX)")]
		public string logo
		{
			get
			{
				return this._logo;
			}
			set
			{
				if ((this._logo != value))
				{
					this.OnlogoChanging(value);
					this.SendPropertyChanging();
					this._logo = value;
					this.SendPropertyChanged("logo");
					this.OnlogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="company_employer", Storage="_employers", ThisKey="id_company", OtherKey="id_company")]
		public EntitySet<employer> employers
		{
			get
			{
				return this._employers;
			}
			set
			{
				this._employers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="company_following_company", Storage="_following_companies", ThisKey="id_company", OtherKey="id_company")]
		public EntitySet<following_company> following_companies
		{
			get
			{
				return this._following_companies;
			}
			set
			{
				this._following_companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="company_job", Storage="_jobs", ThisKey="id_company", OtherKey="id_company")]
		public EntitySet<job> jobs
		{
			get
			{
				return this._jobs;
			}
			set
			{
				this._jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="company_reply_comment", Storage="_reply_comments", ThisKey="id_company", OtherKey="id_company")]
		public EntitySet<reply_comment> reply_comments
		{
			get
			{
				return this._reply_comments;
			}
			set
			{
				this._reply_comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_company", Storage="_account", ThisKey="id_account", OtherKey="id_account", IsForeignKey=true)]
		public account account
		{
			get
			{
				return this._account.Entity;
			}
			set
			{
				account previousValue = this._account.Entity;
				if (((previousValue != value) 
							|| (this._account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account.Entity = null;
						previousValue.companies.Remove(this);
					}
					this._account.Entity = value;
					if ((value != null))
					{
						value.companies.Add(this);
						this._id_account = value.id_account;
					}
					else
					{
						this._id_account = default(string);
					}
					this.SendPropertyChanged("account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_employers(employer entity)
		{
			this.SendPropertyChanging();
			entity.company = this;
		}
		
		private void detach_employers(employer entity)
		{
			this.SendPropertyChanging();
			entity.company = null;
		}
		
		private void attach_following_companies(following_company entity)
		{
			this.SendPropertyChanging();
			entity.company = this;
		}
		
		private void detach_following_companies(following_company entity)
		{
			this.SendPropertyChanging();
			entity.company = null;
		}
		
		private void attach_jobs(job entity)
		{
			this.SendPropertyChanging();
			entity.company = this;
		}
		
		private void detach_jobs(job entity)
		{
			this.SendPropertyChanging();
			entity.company = null;
		}
		
		private void attach_reply_comments(reply_comment entity)
		{
			this.SendPropertyChanging();
			entity.company = this;
		}
		
		private void detach_reply_comments(reply_comment entity)
		{
			this.SendPropertyChanging();
			entity.company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cover_letter")]
	public partial class cover_letter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_letter;
		
		private string _content;
		
		private EntitySet<employee> _employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_letterChanging(string value);
    partial void Onid_letterChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    #endregion
		
		public cover_letter()
		{
			this._employees = new EntitySet<employee>(new Action<employee>(this.attach_employees), new Action<employee>(this.detach_employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_letter", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_letter
		{
			get
			{
				return this._id_letter;
			}
			set
			{
				if ((this._id_letter != value))
				{
					this.Onid_letterChanging(value);
					this.SendPropertyChanging();
					this._id_letter = value;
					this.SendPropertyChanged("id_letter");
					this.Onid_letterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="NVarChar(MAX)")]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cover_letter_employee", Storage="_employees", ThisKey="id_letter", OtherKey="id_letter")]
		public EntitySet<employee> employees
		{
			get
			{
				return this._employees;
			}
			set
			{
				this._employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_employees(employee entity)
		{
			this.SendPropertyChanging();
			entity.cover_letter = this;
		}
		
		private void detach_employees(employee entity)
		{
			this.SendPropertyChanging();
			entity.cover_letter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.employee")]
	public partial class employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_employee;
		
		private string _name_employee;
		
		private System.Nullable<System.DateTime> _day_birth;
		
		private string _gender;
		
		private string _phonenumber_employee;
		
		private string _email;
		
		private string _address_employee;
		
		private System.Nullable<int> _active_status;
		
		private string _id_letter;
		
		private string _id_profile;
		
		private string _id_account;
		
		private string _avatar;
		
		private EntitySet<apply_job> _apply_jobs;
		
		private EntitySet<comment_employee> _comment_employees;
		
		private EntitySet<following_company> _following_companies;
		
		private EntitySet<following_job> _following_jobs;
		
		private EntitySet<reply_comment> _reply_comments;
		
		private EntityRef<account> _account;
		
		private EntityRef<cover_letter> _cover_letter;
		
		private EntityRef<profile> _profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_employeeChanging(string value);
    partial void Onid_employeeChanged();
    partial void Onname_employeeChanging(string value);
    partial void Onname_employeeChanged();
    partial void Onday_birthChanging(System.Nullable<System.DateTime> value);
    partial void Onday_birthChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void Onphonenumber_employeeChanging(string value);
    partial void Onphonenumber_employeeChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Onaddress_employeeChanging(string value);
    partial void Onaddress_employeeChanged();
    partial void Onactive_statusChanging(System.Nullable<int> value);
    partial void Onactive_statusChanged();
    partial void Onid_letterChanging(string value);
    partial void Onid_letterChanged();
    partial void Onid_profileChanging(string value);
    partial void Onid_profileChanged();
    partial void Onid_accountChanging(string value);
    partial void Onid_accountChanged();
    partial void OnavatarChanging(string value);
    partial void OnavatarChanged();
    #endregion
		
		public employee()
		{
			this._apply_jobs = new EntitySet<apply_job>(new Action<apply_job>(this.attach_apply_jobs), new Action<apply_job>(this.detach_apply_jobs));
			this._comment_employees = new EntitySet<comment_employee>(new Action<comment_employee>(this.attach_comment_employees), new Action<comment_employee>(this.detach_comment_employees));
			this._following_companies = new EntitySet<following_company>(new Action<following_company>(this.attach_following_companies), new Action<following_company>(this.detach_following_companies));
			this._following_jobs = new EntitySet<following_job>(new Action<following_job>(this.attach_following_jobs), new Action<following_job>(this.detach_following_jobs));
			this._reply_comments = new EntitySet<reply_comment>(new Action<reply_comment>(this.attach_reply_comments), new Action<reply_comment>(this.detach_reply_comments));
			this._account = default(EntityRef<account>);
			this._cover_letter = default(EntityRef<cover_letter>);
			this._profile = default(EntityRef<profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_employee", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_employee
		{
			get
			{
				return this._id_employee;
			}
			set
			{
				if ((this._id_employee != value))
				{
					this.Onid_employeeChanging(value);
					this.SendPropertyChanging();
					this._id_employee = value;
					this.SendPropertyChanged("id_employee");
					this.Onid_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_employee", DbType="NVarChar(200)")]
		public string name_employee
		{
			get
			{
				return this._name_employee;
			}
			set
			{
				if ((this._name_employee != value))
				{
					this.Onname_employeeChanging(value);
					this.SendPropertyChanging();
					this._name_employee = value;
					this.SendPropertyChanged("name_employee");
					this.Onname_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_day_birth", DbType="DateTime")]
		public System.Nullable<System.DateTime> day_birth
		{
			get
			{
				return this._day_birth;
			}
			set
			{
				if ((this._day_birth != value))
				{
					this.Onday_birthChanging(value);
					this.SendPropertyChanging();
					this._day_birth = value;
					this.SendPropertyChanged("day_birth");
					this.Onday_birthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="NVarChar(5)")]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phonenumber_employee", DbType="VarChar(12)")]
		public string phonenumber_employee
		{
			get
			{
				return this._phonenumber_employee;
			}
			set
			{
				if ((this._phonenumber_employee != value))
				{
					this.Onphonenumber_employeeChanging(value);
					this.SendPropertyChanging();
					this._phonenumber_employee = value;
					this.SendPropertyChanged("phonenumber_employee");
					this.Onphonenumber_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address_employee", DbType="NVarChar(200)")]
		public string address_employee
		{
			get
			{
				return this._address_employee;
			}
			set
			{
				if ((this._address_employee != value))
				{
					this.Onaddress_employeeChanging(value);
					this.SendPropertyChanging();
					this._address_employee = value;
					this.SendPropertyChanged("address_employee");
					this.Onaddress_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active_status", DbType="Int")]
		public System.Nullable<int> active_status
		{
			get
			{
				return this._active_status;
			}
			set
			{
				if ((this._active_status != value))
				{
					this.Onactive_statusChanging(value);
					this.SendPropertyChanging();
					this._active_status = value;
					this.SendPropertyChanged("active_status");
					this.Onactive_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_letter", DbType="VarChar(20)")]
		public string id_letter
		{
			get
			{
				return this._id_letter;
			}
			set
			{
				if ((this._id_letter != value))
				{
					if (this._cover_letter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_letterChanging(value);
					this.SendPropertyChanging();
					this._id_letter = value;
					this.SendPropertyChanged("id_letter");
					this.Onid_letterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_profile", DbType="VarChar(20)")]
		public string id_profile
		{
			get
			{
				return this._id_profile;
			}
			set
			{
				if ((this._id_profile != value))
				{
					if (this._profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_profileChanging(value);
					this.SendPropertyChanging();
					this._id_profile = value;
					this.SendPropertyChanged("id_profile");
					this.Onid_profileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_account", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string id_account
		{
			get
			{
				return this._id_account;
			}
			set
			{
				if ((this._id_account != value))
				{
					if (this._account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_accountChanging(value);
					this.SendPropertyChanging();
					this._id_account = value;
					this.SendPropertyChanged("id_account");
					this.Onid_accountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatar", DbType="NVarChar(MAX)")]
		public string avatar
		{
			get
			{
				return this._avatar;
			}
			set
			{
				if ((this._avatar != value))
				{
					this.OnavatarChanging(value);
					this.SendPropertyChanging();
					this._avatar = value;
					this.SendPropertyChanged("avatar");
					this.OnavatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_apply_job", Storage="_apply_jobs", ThisKey="id_employee", OtherKey="id_employee")]
		public EntitySet<apply_job> apply_jobs
		{
			get
			{
				return this._apply_jobs;
			}
			set
			{
				this._apply_jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_comment_employee", Storage="_comment_employees", ThisKey="id_employee", OtherKey="id_employee")]
		public EntitySet<comment_employee> comment_employees
		{
			get
			{
				return this._comment_employees;
			}
			set
			{
				this._comment_employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_following_company", Storage="_following_companies", ThisKey="id_employee", OtherKey="id_employee")]
		public EntitySet<following_company> following_companies
		{
			get
			{
				return this._following_companies;
			}
			set
			{
				this._following_companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_following_job", Storage="_following_jobs", ThisKey="id_employee", OtherKey="id_employee")]
		public EntitySet<following_job> following_jobs
		{
			get
			{
				return this._following_jobs;
			}
			set
			{
				this._following_jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_reply_comment", Storage="_reply_comments", ThisKey="id_employee", OtherKey="id_employee")]
		public EntitySet<reply_comment> reply_comments
		{
			get
			{
				return this._reply_comments;
			}
			set
			{
				this._reply_comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_employee", Storage="_account", ThisKey="id_account", OtherKey="id_account", IsForeignKey=true)]
		public account account
		{
			get
			{
				return this._account.Entity;
			}
			set
			{
				account previousValue = this._account.Entity;
				if (((previousValue != value) 
							|| (this._account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account.Entity = null;
						previousValue.employees.Remove(this);
					}
					this._account.Entity = value;
					if ((value != null))
					{
						value.employees.Add(this);
						this._id_account = value.id_account;
					}
					else
					{
						this._id_account = default(string);
					}
					this.SendPropertyChanged("account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cover_letter_employee", Storage="_cover_letter", ThisKey="id_letter", OtherKey="id_letter", IsForeignKey=true)]
		public cover_letter cover_letter
		{
			get
			{
				return this._cover_letter.Entity;
			}
			set
			{
				cover_letter previousValue = this._cover_letter.Entity;
				if (((previousValue != value) 
							|| (this._cover_letter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._cover_letter.Entity = null;
						previousValue.employees.Remove(this);
					}
					this._cover_letter.Entity = value;
					if ((value != null))
					{
						value.employees.Add(this);
						this._id_letter = value.id_letter;
					}
					else
					{
						this._id_letter = default(string);
					}
					this.SendPropertyChanged("cover_letter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_employee", Storage="_profile", ThisKey="id_profile", OtherKey="id_profile", IsForeignKey=true)]
		public profile profile
		{
			get
			{
				return this._profile.Entity;
			}
			set
			{
				profile previousValue = this._profile.Entity;
				if (((previousValue != value) 
							|| (this._profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._profile.Entity = null;
						previousValue.employees.Remove(this);
					}
					this._profile.Entity = value;
					if ((value != null))
					{
						value.employees.Add(this);
						this._id_profile = value.id_profile;
					}
					else
					{
						this._id_profile = default(string);
					}
					this.SendPropertyChanged("profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_apply_jobs(apply_job entity)
		{
			this.SendPropertyChanging();
			entity.employee = this;
		}
		
		private void detach_apply_jobs(apply_job entity)
		{
			this.SendPropertyChanging();
			entity.employee = null;
		}
		
		private void attach_comment_employees(comment_employee entity)
		{
			this.SendPropertyChanging();
			entity.employee = this;
		}
		
		private void detach_comment_employees(comment_employee entity)
		{
			this.SendPropertyChanging();
			entity.employee = null;
		}
		
		private void attach_following_companies(following_company entity)
		{
			this.SendPropertyChanging();
			entity.employee = this;
		}
		
		private void detach_following_companies(following_company entity)
		{
			this.SendPropertyChanging();
			entity.employee = null;
		}
		
		private void attach_following_jobs(following_job entity)
		{
			this.SendPropertyChanging();
			entity.employee = this;
		}
		
		private void detach_following_jobs(following_job entity)
		{
			this.SendPropertyChanging();
			entity.employee = null;
		}
		
		private void attach_reply_comments(reply_comment entity)
		{
			this.SendPropertyChanging();
			entity.employee = this;
		}
		
		private void detach_reply_comments(reply_comment entity)
		{
			this.SendPropertyChanging();
			entity.employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.employer")]
	public partial class employer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_employer;
		
		private string _id_company;
		
		private string _id_account;
		
		private EntitySet<comment_employer> _comment_employers;
		
		private EntityRef<account> _account;
		
		private EntityRef<company> _company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_employerChanging(string value);
    partial void Onid_employerChanged();
    partial void Onid_companyChanging(string value);
    partial void Onid_companyChanged();
    partial void Onid_accountChanging(string value);
    partial void Onid_accountChanged();
    #endregion
		
		public employer()
		{
			this._comment_employers = new EntitySet<comment_employer>(new Action<comment_employer>(this.attach_comment_employers), new Action<comment_employer>(this.detach_comment_employers));
			this._account = default(EntityRef<account>);
			this._company = default(EntityRef<company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_employer", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_employer
		{
			get
			{
				return this._id_employer;
			}
			set
			{
				if ((this._id_employer != value))
				{
					this.Onid_employerChanging(value);
					this.SendPropertyChanging();
					this._id_employer = value;
					this.SendPropertyChanged("id_employer");
					this.Onid_employerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_company", DbType="VarChar(20)")]
		public string id_company
		{
			get
			{
				return this._id_company;
			}
			set
			{
				if ((this._id_company != value))
				{
					if (this._company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_companyChanging(value);
					this.SendPropertyChanging();
					this._id_company = value;
					this.SendPropertyChanged("id_company");
					this.Onid_companyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_account", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string id_account
		{
			get
			{
				return this._id_account;
			}
			set
			{
				if ((this._id_account != value))
				{
					if (this._account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_accountChanging(value);
					this.SendPropertyChanging();
					this._id_account = value;
					this.SendPropertyChanged("id_account");
					this.Onid_accountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employer_comment_employer", Storage="_comment_employers", ThisKey="id_employer", OtherKey="id_employer")]
		public EntitySet<comment_employer> comment_employers
		{
			get
			{
				return this._comment_employers;
			}
			set
			{
				this._comment_employers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_employer", Storage="_account", ThisKey="id_account", OtherKey="id_account", IsForeignKey=true)]
		public account account
		{
			get
			{
				return this._account.Entity;
			}
			set
			{
				account previousValue = this._account.Entity;
				if (((previousValue != value) 
							|| (this._account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account.Entity = null;
						previousValue.employers.Remove(this);
					}
					this._account.Entity = value;
					if ((value != null))
					{
						value.employers.Add(this);
						this._id_account = value.id_account;
					}
					else
					{
						this._id_account = default(string);
					}
					this.SendPropertyChanged("account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="company_employer", Storage="_company", ThisKey="id_company", OtherKey="id_company", IsForeignKey=true)]
		public company company
		{
			get
			{
				return this._company.Entity;
			}
			set
			{
				company previousValue = this._company.Entity;
				if (((previousValue != value) 
							|| (this._company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._company.Entity = null;
						previousValue.employers.Remove(this);
					}
					this._company.Entity = value;
					if ((value != null))
					{
						value.employers.Add(this);
						this._id_company = value.id_company;
					}
					else
					{
						this._id_company = default(string);
					}
					this.SendPropertyChanged("company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_comment_employers(comment_employer entity)
		{
			this.SendPropertyChanging();
			entity.employer = this;
		}
		
		private void detach_comment_employers(comment_employer entity)
		{
			this.SendPropertyChanging();
			entity.employer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.following_company")]
	public partial class following_company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_employee;
		
		private string _id_company;
		
		private EntityRef<company> _company;
		
		private EntityRef<employee> _employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_employeeChanging(string value);
    partial void Onid_employeeChanged();
    partial void Onid_companyChanging(string value);
    partial void Onid_companyChanged();
    #endregion
		
		public following_company()
		{
			this._company = default(EntityRef<company>);
			this._employee = default(EntityRef<employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_employee", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_employee
		{
			get
			{
				return this._id_employee;
			}
			set
			{
				if ((this._id_employee != value))
				{
					if (this._employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_employeeChanging(value);
					this.SendPropertyChanging();
					this._id_employee = value;
					this.SendPropertyChanged("id_employee");
					this.Onid_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_company", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_company
		{
			get
			{
				return this._id_company;
			}
			set
			{
				if ((this._id_company != value))
				{
					if (this._company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_companyChanging(value);
					this.SendPropertyChanging();
					this._id_company = value;
					this.SendPropertyChanged("id_company");
					this.Onid_companyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="company_following_company", Storage="_company", ThisKey="id_company", OtherKey="id_company", IsForeignKey=true)]
		public company company
		{
			get
			{
				return this._company.Entity;
			}
			set
			{
				company previousValue = this._company.Entity;
				if (((previousValue != value) 
							|| (this._company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._company.Entity = null;
						previousValue.following_companies.Remove(this);
					}
					this._company.Entity = value;
					if ((value != null))
					{
						value.following_companies.Add(this);
						this._id_company = value.id_company;
					}
					else
					{
						this._id_company = default(string);
					}
					this.SendPropertyChanged("company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_following_company", Storage="_employee", ThisKey="id_employee", OtherKey="id_employee", IsForeignKey=true)]
		public employee employee
		{
			get
			{
				return this._employee.Entity;
			}
			set
			{
				employee previousValue = this._employee.Entity;
				if (((previousValue != value) 
							|| (this._employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee.Entity = null;
						previousValue.following_companies.Remove(this);
					}
					this._employee.Entity = value;
					if ((value != null))
					{
						value.following_companies.Add(this);
						this._id_employee = value.id_employee;
					}
					else
					{
						this._id_employee = default(string);
					}
					this.SendPropertyChanged("employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.following_job")]
	public partial class following_job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_employee;
		
		private string _id_job_detail;
		
		private EntityRef<employee> _employee;
		
		private EntityRef<job_detail> _job_detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_employeeChanging(string value);
    partial void Onid_employeeChanged();
    partial void Onid_job_detailChanging(string value);
    partial void Onid_job_detailChanged();
    #endregion
		
		public following_job()
		{
			this._employee = default(EntityRef<employee>);
			this._job_detail = default(EntityRef<job_detail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_employee", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_employee
		{
			get
			{
				return this._id_employee;
			}
			set
			{
				if ((this._id_employee != value))
				{
					if (this._employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_employeeChanging(value);
					this.SendPropertyChanging();
					this._id_employee = value;
					this.SendPropertyChanged("id_employee");
					this.Onid_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_job_detail", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_job_detail
		{
			get
			{
				return this._id_job_detail;
			}
			set
			{
				if ((this._id_job_detail != value))
				{
					if (this._job_detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_job_detailChanging(value);
					this.SendPropertyChanging();
					this._id_job_detail = value;
					this.SendPropertyChanged("id_job_detail");
					this.Onid_job_detailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_following_job", Storage="_employee", ThisKey="id_employee", OtherKey="id_employee", IsForeignKey=true)]
		public employee employee
		{
			get
			{
				return this._employee.Entity;
			}
			set
			{
				employee previousValue = this._employee.Entity;
				if (((previousValue != value) 
							|| (this._employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee.Entity = null;
						previousValue.following_jobs.Remove(this);
					}
					this._employee.Entity = value;
					if ((value != null))
					{
						value.following_jobs.Add(this);
						this._id_employee = value.id_employee;
					}
					else
					{
						this._id_employee = default(string);
					}
					this.SendPropertyChanged("employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="job_detail_following_job", Storage="_job_detail", ThisKey="id_job_detail", OtherKey="id_job_detail", IsForeignKey=true)]
		public job_detail job_detail
		{
			get
			{
				return this._job_detail.Entity;
			}
			set
			{
				job_detail previousValue = this._job_detail.Entity;
				if (((previousValue != value) 
							|| (this._job_detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._job_detail.Entity = null;
						previousValue.following_jobs.Remove(this);
					}
					this._job_detail.Entity = value;
					if ((value != null))
					{
						value.following_jobs.Add(this);
						this._id_job_detail = value.id_job_detail;
					}
					else
					{
						this._id_job_detail = default(string);
					}
					this.SendPropertyChanged("job_detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.job")]
	public partial class job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_job;
		
		private string _name;
		
		private System.DateTime _release_date;
		
		private string _active;
		
		private string _id_company;
		
		private string _id_title;
		
		private EntitySet<job_detail> _job_details;
		
		private EntityRef<company> _company;
		
		private EntityRef<job_title> _job_title;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_jobChanging(string value);
    partial void Onid_jobChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onrelease_dateChanging(System.DateTime value);
    partial void Onrelease_dateChanged();
    partial void OnactiveChanging(string value);
    partial void OnactiveChanged();
    partial void Onid_companyChanging(string value);
    partial void Onid_companyChanged();
    partial void Onid_titleChanging(string value);
    partial void Onid_titleChanged();
    #endregion
		
		public job()
		{
			this._job_details = new EntitySet<job_detail>(new Action<job_detail>(this.attach_job_details), new Action<job_detail>(this.detach_job_details));
			this._company = default(EntityRef<company>);
			this._job_title = default(EntityRef<job_title>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_job", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_job
		{
			get
			{
				return this._id_job;
			}
			set
			{
				if ((this._id_job != value))
				{
					this.Onid_jobChanging(value);
					this.SendPropertyChanging();
					this._id_job = value;
					this.SendPropertyChanged("id_job");
					this.Onid_jobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_release_date", DbType="DateTime NOT NULL")]
		public System.DateTime release_date
		{
			get
			{
				return this._release_date;
			}
			set
			{
				if ((this._release_date != value))
				{
					this.Onrelease_dateChanging(value);
					this.SendPropertyChanging();
					this._release_date = value;
					this.SendPropertyChanged("release_date");
					this.Onrelease_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="VarChar(5)")]
		public string active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_company", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string id_company
		{
			get
			{
				return this._id_company;
			}
			set
			{
				if ((this._id_company != value))
				{
					if (this._company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_companyChanging(value);
					this.SendPropertyChanging();
					this._id_company = value;
					this.SendPropertyChanged("id_company");
					this.Onid_companyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_title", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string id_title
		{
			get
			{
				return this._id_title;
			}
			set
			{
				if ((this._id_title != value))
				{
					if (this._job_title.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_titleChanging(value);
					this.SendPropertyChanging();
					this._id_title = value;
					this.SendPropertyChanged("id_title");
					this.Onid_titleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="job_job_detail", Storage="_job_details", ThisKey="id_job", OtherKey="id_job")]
		public EntitySet<job_detail> job_details
		{
			get
			{
				return this._job_details;
			}
			set
			{
				this._job_details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="company_job", Storage="_company", ThisKey="id_company", OtherKey="id_company", IsForeignKey=true)]
		public company company
		{
			get
			{
				return this._company.Entity;
			}
			set
			{
				company previousValue = this._company.Entity;
				if (((previousValue != value) 
							|| (this._company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._company.Entity = null;
						previousValue.jobs.Remove(this);
					}
					this._company.Entity = value;
					if ((value != null))
					{
						value.jobs.Add(this);
						this._id_company = value.id_company;
					}
					else
					{
						this._id_company = default(string);
					}
					this.SendPropertyChanged("company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="job_title_job", Storage="_job_title", ThisKey="id_title", OtherKey="id_title", IsForeignKey=true)]
		public job_title job_title
		{
			get
			{
				return this._job_title.Entity;
			}
			set
			{
				job_title previousValue = this._job_title.Entity;
				if (((previousValue != value) 
							|| (this._job_title.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._job_title.Entity = null;
						previousValue.jobs.Remove(this);
					}
					this._job_title.Entity = value;
					if ((value != null))
					{
						value.jobs.Add(this);
						this._id_title = value.id_title;
					}
					else
					{
						this._id_title = default(string);
					}
					this.SendPropertyChanged("job_title");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_job_details(job_detail entity)
		{
			this.SendPropertyChanging();
			entity.job = this;
		}
		
		private void detach_job_details(job_detail entity)
		{
			this.SendPropertyChanging();
			entity.job = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.job_detail")]
	public partial class job_detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_job_detail;
		
		private System.Nullable<decimal> _salary;
		
		private System.Nullable<int> _amount;
		
		private string _id_job;
		
		private string _id_skill;
		
		private EntitySet<apply_job> _apply_jobs;
		
		private EntitySet<following_job> _following_jobs;
		
		private EntityRef<job> _job;
		
		private EntityRef<job_skill> _job_skill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_job_detailChanging(string value);
    partial void Onid_job_detailChanged();
    partial void OnsalaryChanging(System.Nullable<decimal> value);
    partial void OnsalaryChanged();
    partial void OnamountChanging(System.Nullable<int> value);
    partial void OnamountChanged();
    partial void Onid_jobChanging(string value);
    partial void Onid_jobChanged();
    partial void Onid_skillChanging(string value);
    partial void Onid_skillChanged();
    #endregion
		
		public job_detail()
		{
			this._apply_jobs = new EntitySet<apply_job>(new Action<apply_job>(this.attach_apply_jobs), new Action<apply_job>(this.detach_apply_jobs));
			this._following_jobs = new EntitySet<following_job>(new Action<following_job>(this.attach_following_jobs), new Action<following_job>(this.detach_following_jobs));
			this._job = default(EntityRef<job>);
			this._job_skill = default(EntityRef<job_skill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_job_detail", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_job_detail
		{
			get
			{
				return this._id_job_detail;
			}
			set
			{
				if ((this._id_job_detail != value))
				{
					this.Onid_job_detailChanging(value);
					this.SendPropertyChanging();
					this._id_job_detail = value;
					this.SendPropertyChanged("id_job_detail");
					this.Onid_job_detailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int")]
		public System.Nullable<int> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_job", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string id_job
		{
			get
			{
				return this._id_job;
			}
			set
			{
				if ((this._id_job != value))
				{
					if (this._job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_jobChanging(value);
					this.SendPropertyChanging();
					this._id_job = value;
					this.SendPropertyChanged("id_job");
					this.Onid_jobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_skill", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string id_skill
		{
			get
			{
				return this._id_skill;
			}
			set
			{
				if ((this._id_skill != value))
				{
					if (this._job_skill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_skillChanging(value);
					this.SendPropertyChanging();
					this._id_skill = value;
					this.SendPropertyChanged("id_skill");
					this.Onid_skillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="job_detail_apply_job", Storage="_apply_jobs", ThisKey="id_job_detail", OtherKey="id_job_detail")]
		public EntitySet<apply_job> apply_jobs
		{
			get
			{
				return this._apply_jobs;
			}
			set
			{
				this._apply_jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="job_detail_following_job", Storage="_following_jobs", ThisKey="id_job_detail", OtherKey="id_job_detail")]
		public EntitySet<following_job> following_jobs
		{
			get
			{
				return this._following_jobs;
			}
			set
			{
				this._following_jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="job_job_detail", Storage="_job", ThisKey="id_job", OtherKey="id_job", IsForeignKey=true)]
		public job job
		{
			get
			{
				return this._job.Entity;
			}
			set
			{
				job previousValue = this._job.Entity;
				if (((previousValue != value) 
							|| (this._job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._job.Entity = null;
						previousValue.job_details.Remove(this);
					}
					this._job.Entity = value;
					if ((value != null))
					{
						value.job_details.Add(this);
						this._id_job = value.id_job;
					}
					else
					{
						this._id_job = default(string);
					}
					this.SendPropertyChanged("job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="job_skill_job_detail", Storage="_job_skill", ThisKey="id_skill", OtherKey="id_skill", IsForeignKey=true)]
		public job_skill job_skill
		{
			get
			{
				return this._job_skill.Entity;
			}
			set
			{
				job_skill previousValue = this._job_skill.Entity;
				if (((previousValue != value) 
							|| (this._job_skill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._job_skill.Entity = null;
						previousValue.job_details.Remove(this);
					}
					this._job_skill.Entity = value;
					if ((value != null))
					{
						value.job_details.Add(this);
						this._id_skill = value.id_skill;
					}
					else
					{
						this._id_skill = default(string);
					}
					this.SendPropertyChanged("job_skill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_apply_jobs(apply_job entity)
		{
			this.SendPropertyChanging();
			entity.job_detail = this;
		}
		
		private void detach_apply_jobs(apply_job entity)
		{
			this.SendPropertyChanging();
			entity.job_detail = null;
		}
		
		private void attach_following_jobs(following_job entity)
		{
			this.SendPropertyChanging();
			entity.job_detail = this;
		}
		
		private void detach_following_jobs(following_job entity)
		{
			this.SendPropertyChanging();
			entity.job_detail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.job_skill")]
	public partial class job_skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_skill;
		
		private string _name_skill;
		
		private EntitySet<job_detail> _job_details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_skillChanging(string value);
    partial void Onid_skillChanged();
    partial void Onname_skillChanging(string value);
    partial void Onname_skillChanged();
    #endregion
		
		public job_skill()
		{
			this._job_details = new EntitySet<job_detail>(new Action<job_detail>(this.attach_job_details), new Action<job_detail>(this.detach_job_details));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_skill", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_skill
		{
			get
			{
				return this._id_skill;
			}
			set
			{
				if ((this._id_skill != value))
				{
					this.Onid_skillChanging(value);
					this.SendPropertyChanging();
					this._id_skill = value;
					this.SendPropertyChanged("id_skill");
					this.Onid_skillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_skill", DbType="NVarChar(200)")]
		public string name_skill
		{
			get
			{
				return this._name_skill;
			}
			set
			{
				if ((this._name_skill != value))
				{
					this.Onname_skillChanging(value);
					this.SendPropertyChanging();
					this._name_skill = value;
					this.SendPropertyChanged("name_skill");
					this.Onname_skillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="job_skill_job_detail", Storage="_job_details", ThisKey="id_skill", OtherKey="id_skill")]
		public EntitySet<job_detail> job_details
		{
			get
			{
				return this._job_details;
			}
			set
			{
				this._job_details.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_job_details(job_detail entity)
		{
			this.SendPropertyChanging();
			entity.job_skill = this;
		}
		
		private void detach_job_details(job_detail entity)
		{
			this.SendPropertyChanging();
			entity.job_skill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.job_title")]
	public partial class job_title : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_title;
		
		private string _name_title;
		
		private EntitySet<job> _jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_titleChanging(string value);
    partial void Onid_titleChanged();
    partial void Onname_titleChanging(string value);
    partial void Onname_titleChanged();
    #endregion
		
		public job_title()
		{
			this._jobs = new EntitySet<job>(new Action<job>(this.attach_jobs), new Action<job>(this.detach_jobs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_title", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_title
		{
			get
			{
				return this._id_title;
			}
			set
			{
				if ((this._id_title != value))
				{
					this.Onid_titleChanging(value);
					this.SendPropertyChanging();
					this._id_title = value;
					this.SendPropertyChanged("id_title");
					this.Onid_titleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_title", DbType="NVarChar(200)")]
		public string name_title
		{
			get
			{
				return this._name_title;
			}
			set
			{
				if ((this._name_title != value))
				{
					this.Onname_titleChanging(value);
					this.SendPropertyChanging();
					this._name_title = value;
					this.SendPropertyChanged("name_title");
					this.Onname_titleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="job_title_job", Storage="_jobs", ThisKey="id_title", OtherKey="id_title")]
		public EntitySet<job> jobs
		{
			get
			{
				return this._jobs;
			}
			set
			{
				this._jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_jobs(job entity)
		{
			this.SendPropertyChanging();
			entity.job_title = this;
		}
		
		private void detach_jobs(job entity)
		{
			this.SendPropertyChanging();
			entity.job_title = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.profile")]
	public partial class profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_profile;
		
		private string _cv;
		
		private EntitySet<employee> _employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_profileChanging(string value);
    partial void Onid_profileChanged();
    partial void OncvChanging(string value);
    partial void OncvChanged();
    #endregion
		
		public profile()
		{
			this._employees = new EntitySet<employee>(new Action<employee>(this.attach_employees), new Action<employee>(this.detach_employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_profile", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_profile
		{
			get
			{
				return this._id_profile;
			}
			set
			{
				if ((this._id_profile != value))
				{
					this.Onid_profileChanging(value);
					this.SendPropertyChanging();
					this._id_profile = value;
					this.SendPropertyChanged("id_profile");
					this.Onid_profileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cv", DbType="VarChar(200)")]
		public string cv
		{
			get
			{
				return this._cv;
			}
			set
			{
				if ((this._cv != value))
				{
					this.OncvChanging(value);
					this.SendPropertyChanging();
					this._cv = value;
					this.SendPropertyChanged("cv");
					this.OncvChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="profile_employee", Storage="_employees", ThisKey="id_profile", OtherKey="id_profile")]
		public EntitySet<employee> employees
		{
			get
			{
				return this._employees;
			}
			set
			{
				this._employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_employees(employee entity)
		{
			this.SendPropertyChanging();
			entity.profile = this;
		}
		
		private void detach_employees(employee entity)
		{
			this.SendPropertyChanging();
			entity.profile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.rating")]
	public partial class rating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_rate;
		
		private string _id_employee;
		
		private System.Nullable<short> _rate_star;
		
		private string _content;
		
		private string _id_company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_rateChanging(string value);
    partial void Onid_rateChanged();
    partial void Onid_employeeChanging(string value);
    partial void Onid_employeeChanged();
    partial void Onrate_starChanging(System.Nullable<short> value);
    partial void Onrate_starChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void Onid_companyChanging(string value);
    partial void Onid_companyChanged();
    #endregion
		
		public rating()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_rate", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_rate
		{
			get
			{
				return this._id_rate;
			}
			set
			{
				if ((this._id_rate != value))
				{
					this.Onid_rateChanging(value);
					this.SendPropertyChanging();
					this._id_rate = value;
					this.SendPropertyChanged("id_rate");
					this.Onid_rateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_employee", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string id_employee
		{
			get
			{
				return this._id_employee;
			}
			set
			{
				if ((this._id_employee != value))
				{
					this.Onid_employeeChanging(value);
					this.SendPropertyChanging();
					this._id_employee = value;
					this.SendPropertyChanged("id_employee");
					this.Onid_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rate_star", DbType="SmallInt")]
		public System.Nullable<short> rate_star
		{
			get
			{
				return this._rate_star;
			}
			set
			{
				if ((this._rate_star != value))
				{
					this.Onrate_starChanging(value);
					this.SendPropertyChanging();
					this._rate_star = value;
					this.SendPropertyChanged("rate_star");
					this.Onrate_starChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="NVarChar(MAX)")]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_company", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string id_company
		{
			get
			{
				return this._id_company;
			}
			set
			{
				if ((this._id_company != value))
				{
					this.Onid_companyChanging(value);
					this.SendPropertyChanging();
					this._id_company = value;
					this.SendPropertyChanged("id_company");
					this.Onid_companyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.reply_comment")]
	public partial class reply_comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id_comment_reply;
		
		private string _content;
		
		private System.Nullable<System.DateTime> _date_reply;
		
		private string _id_company;
		
		private string _id_employee;
		
		private string _id_comment;
		
		private EntityRef<comment_employee> _comment_employee;
		
		private EntityRef<company> _company;
		
		private EntityRef<employee> _employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_comment_replyChanging(string value);
    partial void Onid_comment_replyChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void Ondate_replyChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_replyChanged();
    partial void Onid_companyChanging(string value);
    partial void Onid_companyChanged();
    partial void Onid_employeeChanging(string value);
    partial void Onid_employeeChanged();
    partial void Onid_commentChanging(string value);
    partial void Onid_commentChanged();
    #endregion
		
		public reply_comment()
		{
			this._comment_employee = default(EntityRef<comment_employee>);
			this._company = default(EntityRef<company>);
			this._employee = default(EntityRef<employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_comment_reply", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id_comment_reply
		{
			get
			{
				return this._id_comment_reply;
			}
			set
			{
				if ((this._id_comment_reply != value))
				{
					this.Onid_comment_replyChanging(value);
					this.SendPropertyChanging();
					this._id_comment_reply = value;
					this.SendPropertyChanged("id_comment_reply");
					this.Onid_comment_replyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="NVarChar(MAX)")]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_reply", DbType="DateTime")]
		public System.Nullable<System.DateTime> date_reply
		{
			get
			{
				return this._date_reply;
			}
			set
			{
				if ((this._date_reply != value))
				{
					this.Ondate_replyChanging(value);
					this.SendPropertyChanging();
					this._date_reply = value;
					this.SendPropertyChanged("date_reply");
					this.Ondate_replyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_company", DbType="VarChar(20)")]
		public string id_company
		{
			get
			{
				return this._id_company;
			}
			set
			{
				if ((this._id_company != value))
				{
					if (this._company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_companyChanging(value);
					this.SendPropertyChanging();
					this._id_company = value;
					this.SendPropertyChanged("id_company");
					this.Onid_companyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_employee", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string id_employee
		{
			get
			{
				return this._id_employee;
			}
			set
			{
				if ((this._id_employee != value))
				{
					if (this._employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_employeeChanging(value);
					this.SendPropertyChanging();
					this._id_employee = value;
					this.SendPropertyChanged("id_employee");
					this.Onid_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_comment", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string id_comment
		{
			get
			{
				return this._id_comment;
			}
			set
			{
				if ((this._id_comment != value))
				{
					if (this._comment_employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_commentChanging(value);
					this.SendPropertyChanging();
					this._id_comment = value;
					this.SendPropertyChanged("id_comment");
					this.Onid_commentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="comment_employee_reply_comment", Storage="_comment_employee", ThisKey="id_comment", OtherKey="id_comments", IsForeignKey=true)]
		public comment_employee comment_employee
		{
			get
			{
				return this._comment_employee.Entity;
			}
			set
			{
				comment_employee previousValue = this._comment_employee.Entity;
				if (((previousValue != value) 
							|| (this._comment_employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._comment_employee.Entity = null;
						previousValue.reply_comments.Remove(this);
					}
					this._comment_employee.Entity = value;
					if ((value != null))
					{
						value.reply_comments.Add(this);
						this._id_comment = value.id_comments;
					}
					else
					{
						this._id_comment = default(string);
					}
					this.SendPropertyChanged("comment_employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="company_reply_comment", Storage="_company", ThisKey="id_company", OtherKey="id_company", IsForeignKey=true)]
		public company company
		{
			get
			{
				return this._company.Entity;
			}
			set
			{
				company previousValue = this._company.Entity;
				if (((previousValue != value) 
							|| (this._company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._company.Entity = null;
						previousValue.reply_comments.Remove(this);
					}
					this._company.Entity = value;
					if ((value != null))
					{
						value.reply_comments.Add(this);
						this._id_company = value.id_company;
					}
					else
					{
						this._id_company = default(string);
					}
					this.SendPropertyChanged("company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="employee_reply_comment", Storage="_employee", ThisKey="id_employee", OtherKey="id_employee", IsForeignKey=true)]
		public employee employee
		{
			get
			{
				return this._employee.Entity;
			}
			set
			{
				employee previousValue = this._employee.Entity;
				if (((previousValue != value) 
							|| (this._employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._employee.Entity = null;
						previousValue.reply_comments.Remove(this);
					}
					this._employee.Entity = value;
					if ((value != null))
					{
						value.reply_comments.Add(this);
						this._id_employee = value.id_employee;
					}
					else
					{
						this._id_employee = default(string);
					}
					this.SendPropertyChanged("employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.role")]
	public partial class role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_role;
		
		private string _name_role;
		
		private EntitySet<account> _accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_roleChanging(int value);
    partial void Onid_roleChanged();
    partial void Onname_roleChanging(string value);
    partial void Onname_roleChanged();
    #endregion
		
		public role()
		{
			this._accounts = new EntitySet<account>(new Action<account>(this.attach_accounts), new Action<account>(this.detach_accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_role", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_role
		{
			get
			{
				return this._id_role;
			}
			set
			{
				if ((this._id_role != value))
				{
					this.Onid_roleChanging(value);
					this.SendPropertyChanging();
					this._id_role = value;
					this.SendPropertyChanged("id_role");
					this.Onid_roleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name_role", DbType="NVarChar(25)")]
		public string name_role
		{
			get
			{
				return this._name_role;
			}
			set
			{
				if ((this._name_role != value))
				{
					this.Onname_roleChanging(value);
					this.SendPropertyChanging();
					this._name_role = value;
					this.SendPropertyChanged("name_role");
					this.Onname_roleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_account", Storage="_accounts", ThisKey="id_role", OtherKey="id_role")]
		public EntitySet<account> accounts
		{
			get
			{
				return this._accounts;
			}
			set
			{
				this._accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_accounts(account entity)
		{
			this.SendPropertyChanging();
			entity.role = this;
		}
		
		private void detach_accounts(account entity)
		{
			this.SendPropertyChanging();
			entity.role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.token")]
	public partial class token
	{
		
		private string _Token1;
		
		private System.DateTime _time1;
		
		private System.DateTime _time2;
		
		public token()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Token", Storage="_Token1", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Token1
		{
			get
			{
				return this._Token1;
			}
			set
			{
				if ((this._Token1 != value))
				{
					this._Token1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time1", DbType="DateTime NOT NULL")]
		public System.DateTime time1
		{
			get
			{
				return this._time1;
			}
			set
			{
				if ((this._time1 != value))
				{
					this._time1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time2", DbType="DateTime NOT NULL")]
		public System.DateTime time2
		{
			get
			{
				return this._time2;
			}
			set
			{
				if ((this._time2 != value))
				{
					this._time2 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
